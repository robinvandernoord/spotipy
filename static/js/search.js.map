{"version":3,"sources":["../es6/search.js"],"names":["s","SpotifyWebApi","setAccessToken","TOKEN","block","item","$","message","css","border","backgroundColor","color","fontSize","cursor","unblock","timeout","add_to_sidebar","name","new_item","text","attr","escape","append","get_playlist","playlist_id","playlist_items","getPlaylistTracks","empty","forEach","element","map","data","search","query","resultsdiv","track_ids","result","searchTracks","song","artistImage","getArtist","artists","artist","join","album","albumImage","id","loadTemplate","on","e","preventDefault","post","POSTURL","then","notify","catch","error","includes","urlParam","URL","window","location","href","searchParams","get","setParam","newvalue","history","pushState","songinput","term","val","removeClass","addClass","query_param","unescape"],"mappings":"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","file":"search.js","sourcesContent":["const s = new SpotifyWebApi();\ns.setAccessToken(TOKEN);\n\nfunction block(item) {\n    $(item).block({\n        message: '<i class=\"fa fa-check\"></i>',\n        css: {\n            border: '0',\n            backgroundColor: 'none',\n            color: 'white',\n            fontSize: 200,\n            cursor: 'not-allowed',\n        }\n    });\n}\n\nfunction unblock(item) {\n    $(item).block({\n        message: '<i class=\"fa fa-times\"></i>',\n        css: {\n            border: '0',\n            backgroundColor: 'none',\n            color: 'white',\n            fontSize: 200,\n            cursor: 'not-allowed',\n        },\n        timeout: 1000,\n    });\n    // $(item).unblock();\n}\n\nfunction add_to_sidebar(name) {\n    let new_item = $('<a>');\n    new_item.text(name);\n    new_item.attr('href', '?query=' + escape(name));\n    $('#mySidenav .playlist').append(new_item);\n}\n\nasync function get_playlist(playlist_id) {\n    let playlist_items = (await s.getPlaylistTracks(playlist_id))['items'];\n\n    $('#mySidenav .playlist').empty();\n\n    playlist_items.forEach(element => add_to_sidebar(element['track']['name']));\n\n    return playlist_items.map(data => data['track']['id'])\n}\n\nasync function search(query) {\n    let resultsdiv = $('#results');\n    resultsdiv.empty();\n\n    const track_ids = await get_playlist(playlist_id);\n\n    const result = await s.searchTracks(query, {'limit': 6});\n    result['tracks']['items'].forEach(async function (song) {\n        let name = song['name'];\n\n        let artistImage = (await s.getArtist(song['artists'][0]['id']))['images'][0]['url'];\n\n        let artists = song['artists'].map(\n            artist => artist['name']\n        ).join(', ');\n        let album = song['album']['name'];\n        let albumImage = song['album']['images'][0]['url'];\n        const id = song['id'];\n\n        let new_item = $(\"<div class='search-result-item column is-one-third'>\").loadTemplate(\n            \"#spotify-result\",\n            {\n                id,\n                name,\n                artists,\n                artistImage,\n                album,\n                albumImage,\n            });\n\n\n        new_item.on('click',\n            '.add-to-list',\n            function (e) {\n                e.preventDefault();\n                $.post(\n                    POSTURL,\n                    {'track_id': id})\n                // todo: replace with pop-up notification\n                    .then(result => notify(result, 'success'))\n                    .catch(error => {\n                        notify(error['responseText'], 'danger');\n                        unblock(new_item);\n                    });\n\n\n                block(new_item);\n                add_to_sidebar(name);\n\n            }\n        );\n\n        resultsdiv.append(new_item);\n\n        if (track_ids.includes(id)) {\n            block(new_item);\n        }\n    })\n}\n\n$.urlParam = function (name) {\n    return new URL(window.location.href).searchParams.get(name);\n};\n$.setParam = function (name, newvalue) {\n    history.pushState({\n        id: ''\n    }, '', `?${name}=${newvalue}`);\n};\n\n$(() => {\n\n    // on form submit\n    $('#searchform').on('submit', function () {\n        let songinput = $('#searchform #songname');\n        const term = songinput.val();\n        if (term) {\n            search(term);\n            $.setParam('query', term);\n            songinput.removeClass('is-danger');\n            songinput.addClass('is-success')\n        } else {\n            // todo: foutmelding\n            songinput.removeClass('is-success');\n            songinput.addClass('is-danger')\n        }\n        return false;\n    });\n\n    // autofill/search ?query= param\n    let query_param = $.urlParam('query');\n    if (query_param) {\n        query_param = unescape(query_param);\n        search(query_param);\n        $('#searchform #songname').val(query_param);\n    }\n\n})"]}