{"version":3,"sources":["../es6/spotify-web-api.js"],"names":["SpotifyWebApi","_accessToken","_promiseImplementation","WrapPromiseWithAbort","promise","onAbort","abort","_promiseProvider","promiseFunction","returnedPromise","deferred","defer","resolvedResult","resolve","rejectedResult","reject","window","Promise","_extend","args","Array","prototype","slice","call","arguments","target","objects","forEach","object","j","hasOwnProperty","_buildUrl","url","parameters","qs","key","value","encodeURIComponent","length","substring","_performRequest","requestData","callback","req","XMLHttpRequest","success","data","failure","type","open","params","setRequestHeader","contentType","onreadystatechange","readyState","responseText","JSON","parse","e","console","error","status","send","postData","stringify","_checkParamsAndPerformRequest","options","optionsAlwaysExtendParams","opt","cb","Constr","constructor","getGeneric","getMe","getMySavedTracks","addToMySavedTracks","trackIds","removeFromMySavedTracks","containsMySavedTracks","ids","join","getMySavedAlbums","addToMySavedAlbums","albumIds","removeFromMySavedAlbums","containsMySavedAlbums","getMyTopArtists","getMyTopTracks","getMyRecentlyPlayedTracks","followUsers","userIds","followArtists","artistIds","followPlaylist","playlistId","unfollowUsers","unfollowArtists","unfollowPlaylist","isFollowingUsers","isFollowingArtists","areFollowingPlaylist","getFollowedArtists","getUser","userId","getUserPlaylists","getPlaylist","getPlaylistTracks","createPlaylist","changePlaylistDetails","addTracksToPlaylist","uris","replaceTracksInPlaylist","reorderTracksInPlaylist","rangeStart","insertBefore","range_start","insert_before","removeTracksFromPlaylist","dataToBeSent","map","uri","tracks","removeTracksFromPlaylistWithSnapshotId","snapshotId","snapshot_id","removeTracksFromPlaylistInPositions","positions","uploadCustomPlaylistCoverImage","imageData","replace","getAlbum","albumId","getAlbumTracks","getAlbums","getTrack","trackId","getTracks","getArtist","artistId","getArtists","getArtistAlbums","getArtistTopTracks","countryId","country","getArtistRelatedArtists","getFeaturedPlaylists","getNewReleases","getCategories","getCategory","categoryId","getCategoryPlaylists","search","query","types","q","searchAlbums","searchArtists","searchTracks","searchPlaylists","getAudioFeaturesForTrack","getAudioFeaturesForTracks","getAudioAnalysisForTrack","getRecommendations","getAvailableGenreSeeds","getMyDevices","getMyCurrentPlaybackState","getMyCurrentPlayingTrack","transferMyPlayback","deviceIds","device_ids","play","device_id","field","newOptions","pause","skipToNext","skipToPrevious","seek","position_ms","setRepeat","state","setVolume","volume_percent","setShuffle","getAccessToken","setAccessToken","accessToken","setPromiseImplementation","PromiseImplementation","valid","p","then","catch","Error","module","exports"],"mappings":"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","file":"spotify-web-api.js","sourcesContent":["/* global module */\n'use strict';\n\n/**\n * Class representing the API\n */\nvar SpotifyWebApi = (function() {\n  var _baseUri = 'https://api.spotify.com/v1';\n  var _accessToken = null;\n  var _promiseImplementation = null;\n\n  var WrapPromiseWithAbort = function(promise, onAbort) {\n    promise.abort = onAbort;\n    return promise;\n  };\n\n  var _promiseProvider = function(promiseFunction, onAbort) {\n    var returnedPromise;\n    if (_promiseImplementation !== null) {\n      var deferred = _promiseImplementation.defer();\n      promiseFunction(\n        function(resolvedResult) {\n          deferred.resolve(resolvedResult);\n        },\n        function(rejectedResult) {\n          deferred.reject(rejectedResult);\n        }\n      );\n      returnedPromise = deferred.promise;\n    } else {\n      if (window.Promise) {\n        returnedPromise = new window.Promise(promiseFunction);\n      }\n    }\n\n    if (returnedPromise) {\n      return new WrapPromiseWithAbort(returnedPromise, onAbort);\n    } else {\n      return null;\n    }\n  };\n\n  var _extend = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var target = args[0];\n    var objects = args.slice(1);\n    target = target || {};\n    objects.forEach(function(object) {\n      for (var j in object) {\n        if (object.hasOwnProperty(j)) {\n          target[j] = object[j];\n        }\n      }\n    });\n    return target;\n  };\n\n  var _buildUrl = function(url, parameters) {\n    var qs = '';\n    for (var key in parameters) {\n      if (parameters.hasOwnProperty(key)) {\n        var value = parameters[key];\n        qs += encodeURIComponent(key) + '=' + encodeURIComponent(value) + '&';\n      }\n    }\n    if (qs.length > 0) {\n      // chop off last '&'\n      qs = qs.substring(0, qs.length - 1);\n      url = url + '?' + qs;\n    }\n    return url;\n  };\n\n  var _performRequest = function(requestData, callback) {\n    var req = new XMLHttpRequest();\n\n    var promiseFunction = function(resolve, reject) {\n      function success(data) {\n        if (resolve) {\n          resolve(data);\n        }\n        if (callback) {\n          callback(null, data);\n        }\n      }\n\n      function failure() {\n        if (reject) {\n          reject(req);\n        }\n        if (callback) {\n          callback(req, null);\n        }\n      }\n\n      var type = requestData.type || 'GET';\n      req.open(type, _buildUrl(requestData.url, requestData.params));\n      if (_accessToken) {\n        req.setRequestHeader('Authorization', 'Bearer ' + _accessToken);\n      }\n      if (requestData.contentType) {\n        req.setRequestHeader('Content-Type', requestData.contentType)\n      }\n\n      req.onreadystatechange = function() {\n        if (req.readyState === 4) {\n          var data = null;\n          try {\n            data = req.responseText ? JSON.parse(req.responseText) : '';\n          } catch (e) {\n            console.error(e);\n          }\n\n          if (req.status >= 200 && req.status < 300) {\n            success(data);\n          } else {\n            failure();\n          }\n        }\n      };\n\n      if (type === 'GET') {\n        req.send(null);\n      } else {\n        var postData = null\n        if (requestData.postData) {\n          postData = requestData.contentType === 'image/jpeg' ? requestData.postData : JSON.stringify(requestData.postData)\n        }\n        req.send(postData);\n      }\n    };\n\n    if (callback) {\n      promiseFunction();\n      return null;\n    } else {\n      return _promiseProvider(promiseFunction, function() {\n        req.abort();\n      });\n    }\n  };\n\n  var _checkParamsAndPerformRequest = function(requestData, options, callback, optionsAlwaysExtendParams) {\n    var opt = {};\n    var cb = null;\n\n    if (typeof options === 'object') {\n      opt = options;\n      cb = callback;\n    } else if (typeof options === 'function') {\n      cb = options;\n    }\n\n    // options extend postData, if any. Otherwise they extend parameters sent in the url\n    var type = requestData.type || 'GET';\n    if (type !== 'GET' && requestData.postData && !optionsAlwaysExtendParams) {\n      requestData.postData = _extend(requestData.postData, opt);\n    } else {\n      requestData.params = _extend(requestData.params, opt);\n    }\n    return _performRequest(requestData, cb);\n  };\n\n  /**\n   * Creates an instance of the wrapper\n   * @constructor\n   */\n  var Constr = function() {};\n\n  Constr.prototype = {\n    constructor: SpotifyWebApi\n  };\n\n  /**\n   * Fetches a resource through a generic GET request.\n   *\n   * @param {string} url The URL to be fetched\n   * @param {function(Object,Object)} callback An optional callback\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getGeneric = function(url, callback) {\n    var requestData = {\n      url: url\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Fetches information about the current user.\n   * See [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMe = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches current user's saved tracks.\n   * See [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds a list of tracks to the current user's saved tracks.\n   * See [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'PUT',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove a list of tracks from the current user's saved tracks.\n   * See [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks',\n      type: 'DELETE',\n      postData: trackIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Checks if the current user's saved tracks contains a certain list of tracks.\n   * See [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/tracks/contains',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of the albums saved in the current Spotify user's \"Your Music\" library.\n   * See [Get Current User's Saved Albums](https://developer.spotify.com/web-api/get-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMySavedAlbums = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Save one or more albums to the current user's \"Your Music\" library.\n   * See [Save Albums for Current User](https://developer.spotify.com/web-api/save-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addToMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'PUT',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove one or more albums from the current user's \"Your Music\" library.\n   * See [Remove Albums for Current User](https://developer.spotify.com/web-api/remove-albums-user/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeFromMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums',\n      type: 'DELETE',\n      postData: albumIds\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Check if one or more albums is already saved in the current Spotify user's \"Your Music\" library.\n   * See [Check User's Saved Albums](https://developer.spotify.com/web-api/check-users-saved-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI, it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.containsMySavedAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/albums/contains',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top artists based on calculated affinity.\n   * See [Get a User’s Top Artists](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopArtists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the current user’s top tracks based on calculated affinity.\n   * See [Get a User’s Top Tracks](https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyTopTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/top/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get tracks from the current user’s recently played tracks.\n   * See [Get Current User’s Recently Played Tracks](https://developer.spotify.com/web-api/web-api-personalization-endpoints/get-recently-played/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyRecentlyPlayedTracks = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/recently-played'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more other Spotify users.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Adds the current user as a follower of one or more artists.\n   * See [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'PUT',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Add the current user as a follower of one playlist.\n   * See [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed. For instance,\n   * whether you want the playlist to be followed privately ({public: false})\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.followPlaylist = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'PUT',\n      postData: {}\n    };\n\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more other Spotify users.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Removes the current user as a follower of one or more artists.\n   * See [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/',\n      type: 'DELETE',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Remove the current user as a follower of one playlist.\n   * See [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an empty value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.unfollowPlaylist = function(playlistId, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers',\n      type: 'DELETE'\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more other Spotify users.\n   * See [Check if Current User Follows Users or Artists](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the users sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingUsers = function(userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(','),\n        type: 'user'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Checks to see if the current user is following one or more artists.\n   * See [Check if Current User Follows](https://developer.spotify.com/web-api/check-current-user-follows/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the user is following the artists sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.isFollowingArtists = function(artistIds, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following/contains',\n      type: 'GET',\n      params: {\n        ids: artistIds.join(','),\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Check to see if one or more Spotify users are following a specified playlist.\n   * See [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} userIds The ids of the users. If you know their Spotify URI it is easy\n   * to find their user id (e.g. spotify:user:<here_is_the_user_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an array of boolean values that indicate\n   * whether the users are following the playlist sent in the request.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.areFollowingPlaylist = function(playlistId, userIds, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/followers/contains',\n      type: 'GET',\n      params: {\n        ids: userIds.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, callback);\n  };\n\n  /**\n   * Get the current user's followed artists.\n   * See [Get User's Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} [options] Options, being after and limit.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is an object with a paged object containing\n   * artists.\n   * @returns {Promise|undefined} A promise that if successful, resolves to an object containing a paging object which contains\n   * artists objects. Not returned if a callback is given.\n   */\n  Constr.prototype.getFollowedArtists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/following',\n      type: 'GET',\n      params: {\n        type: 'artist'\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches information about a specific user.\n   * See [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUser = function(userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId)\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of the current user's playlists.\n   * See [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId An optional id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>). If not provided, the id of the user that granted\n   * the permissions will be used.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getUserPlaylists = function(userId, options, callback) {\n    var requestData;\n    if (typeof userId === 'string') {\n      requestData = {\n        url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists'\n      };\n    } else {\n      requestData = {\n        url: _baseUri + '/me/playlists'\n      };\n      callback = options;\n      options = userId;\n    }\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a specific playlist.\n   * See [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylist = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks from a specific playlist.\n   * See [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getPlaylistTracks = function(playlistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Creates a playlist and stores it in the current user's library.\n   * See [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} userId The id of the user. If you know the Spotify URI it is easy\n   * to find the id (e.g. spotify:user:<here_is_the_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.createPlaylist = function(userId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/users/' + encodeURIComponent(userId) + '/playlists',\n      type: 'POST',\n      postData: options\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Change a playlist's name and public/private state\n   * See [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Object} data A JSON object with the data to update. E.g. {name: 'A new name', public: true}\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.changePlaylistDetails = function(playlistId, data, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId,\n      type: 'PUT',\n      postData: data\n    };\n    return _checkParamsAndPerformRequest(requestData, data, callback);\n  };\n\n  /**\n   * Add tracks to a playlist.\n   * See [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.addTracksToPlaylist = function(playlistId, uris, options, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'POST',\n      postData: {\n        uris: uris\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback, true);\n  };\n\n  /**\n   * Replace the tracks of a playlist\n   * See [Replace a Playlist's Tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<string>} uris An array of Spotify URIs for the tracks\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.replaceTracksInPlaylist = function(playlistId, uris, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: { uris: uris }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Reorder tracks in a playlist\n   * See [Reorder a Playlist’s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {number} rangeStart The position of the first track to be reordered.\n   * @param {number} insertBefore The position where the tracks should be inserted. To reorder the tracks to\n   * the end of the playlist, simply set insert_before to the position after the last track.\n   * @param {Object} options An object with optional parameters (range_length, snapshot_id)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.reorderTracksInPlaylist = function(playlistId, rangeStart, insertBefore, options, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'PUT',\n      postData: {\n        range_start: rangeStart,\n        insert_before: insertBefore\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylist = function(playlistId, uris, callback) {\n    var dataToBeSent = uris.map(function(uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: { tracks: dataToBeSent }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying a snapshot id.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<Object>} uris An array of tracks to be removed. Each element of the array can be either a\n   * string, in which case it is treated as a URI, or an object containing the properties `uri` (which is a\n   * string) and `positions` (which is an array of integers).\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistWithSnapshotId = function(playlistId, uris, snapshotId, callback) {\n    var dataToBeSent = uris.map(function(uri) {\n      if (typeof uri === 'string') {\n        return { uri: uri };\n      } else {\n        return uri;\n      }\n    });\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        tracks: dataToBeSent,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Remove tracks from a playlist, specifying the positions of the tracks to be removed.\n   * See [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {Array<number>} positions array of integers containing the positions of the tracks to remove\n   * from the playlist.\n   * @param {string} snapshotId The playlist's snapshot ID against which you want to make the changes\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.removeTracksFromPlaylistInPositions = function(playlistId, positions, snapshotId, callback) {\n    /* eslint-disable camelcase */\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/tracks',\n      type: 'DELETE',\n      postData: {\n        positions: positions,\n        snapshot_id: snapshotId\n      }\n    };\n    /* eslint-enable camelcase */\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Upload a custom playlist cover image.\n   * See [Upload A Custom Playlist Cover Image](https://developer.spotify.com/web-api/upload-a-custom-playlist-cover-image/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} playlistId The id of the playlist. If you know the Spotify URI it is easy\n   * to find the playlist id (e.g. spotify:user:xxxx:playlist:<here_is_the_playlist_id>)\n   * @param {string} imageData Base64 encoded JPEG image data, maximum payload size is 256 KB.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.uploadCustomPlaylistCoverImage = function(playlistId, imageData, callback) {\n    var requestData = {\n      url: _baseUri + '/playlists/' + playlistId + '/images',\n      type: 'PUT',\n      postData: imageData.replace(/^data:image\\/jpeg;base64,/, ''),\n      contentType: 'image/jpeg'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Fetches an album from the Spotify catalog.\n   * See [Get an Album](https://developer.spotify.com/web-api/get-album/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbum = function(albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the tracks of an album from the Spotify catalog.\n   * See [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} albumId The id of the album. If you know the Spotify URI it is easy\n   * to find the album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbumTracks = function(albumId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/' + albumId + '/tracks'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple albums from the Spotify catalog.\n   * See [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} albumIds The ids of the albums. If you know their Spotify URI it is easy\n   * to find their album id (e.g. spotify:album:<here_is_the_album_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAlbums = function(albumIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/albums/',\n      params: { ids: albumIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a track from the Spotify catalog.\n   * See [Get a Track](https://developer.spotify.com/web-api/get-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTrack = function(trackId, options, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/tracks/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple tracks from the Spotify catalog.\n   * See [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getTracks = function(trackIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/tracks/',\n      params: { ids: trackIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches an artist from the Spotify catalog.\n   * See [Get an Artist](https://developer.spotify.com/web-api/get-artist/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtist = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches multiple artists from the Spotify catalog.\n   * See [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} artistIds The ids of the artists. If you know their Spotify URI it is easy\n   * to find their artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtists = function(artistIds, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/',\n      params: { ids: artistIds.join(',') }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches the albums of an artist from the Spotify catalog.\n   * See [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistAlbums = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/albums'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of top tracks of an artist from the Spotify catalog, for a specific country.\n   * See [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {string} countryId The id of the country (e.g. ES for Spain or US for United States)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistTopTracks = function(artistId, countryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/top-tracks',\n      params: { country: countryId }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of artists related with a given one from the Spotify catalog.\n   * See [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} artistId The id of the artist. If you know the Spotify URI it is easy\n   * to find the artist id (e.g. spotify:artist:<here_is_the_artist_id>)\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getArtistRelatedArtists = function(artistId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/artists/' + artistId + '/related-artists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of Spotify featured playlists (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getFeaturedPlaylists = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/featured-playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches a list of new album releases featured in Spotify (shown, for example, on a Spotify player's \"Browse\" tab).\n   * See [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getNewReleases = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/new-releases'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a List of Categories](https://developer.spotify.com/web-api/get-list-categories/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategories = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a single category used to tag items in Spotify (on, for example, the Spotify player's \"Browse\" tab).\n   * See [Get a Category](https://developer.spotify.com/web-api/get-category/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategory = function(categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get a list of Spotify playlists tagged with a particular category.\n   * See [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} categoryId The id of the category. These can be found with the getCategories function\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getCategoryPlaylists = function(categoryId, options, callback) {\n    var requestData = {\n      url: _baseUri + '/browse/categories/' + categoryId + '/playlists'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get Spotify catalog information about artists, albums, tracks or playlists that match a keyword string.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Array<string>} types An array of item types to search across.\n   * Valid types are: 'album', 'artist', 'playlist', and 'track'.\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.search = function(query, types, options, callback) {\n    var requestData = {\n      url: _baseUri + '/search/',\n      params: {\n        q: query,\n        type: types.join(',')\n      }\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Fetches albums from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchAlbums = function(query, options, callback) {\n    return this.search(query, ['album'], options, callback);\n  };\n\n  /**\n   * Fetches artists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchArtists = function(query, options, callback) {\n    return this.search(query, ['artist'], options, callback);\n  };\n\n  /**\n   * Fetches tracks from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchTracks = function(query, options, callback) {\n    return this.search(query, ['track'], options, callback);\n  };\n\n  /**\n   * Fetches playlists from the Spotify catalog according to a query.\n   * See [Search for an Item](https://developer.spotify.com/web-api/search-item/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} query The search query\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.searchPlaylists = function(query, options, callback) {\n    return this.search(query, ['playlist'], options, callback);\n  };\n\n  /**\n   * Get audio features for a single track identified by its unique Spotify ID.\n   * See [Get Audio Features for a Track](https://developer.spotify.com/web-api/get-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTrack = function(trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-features/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio features for multiple tracks based on their Spotify IDs.\n   * See [Get Audio Features for Several Tracks](https://developer.spotify.com/web-api/get-several-audio-features/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} trackIds The ids of the tracks. If you know their Spotify URI it is easy\n   * to find their track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioFeaturesForTracks = function(trackIds, callback) {\n    var requestData = {\n      url: _baseUri + '/audio-features',\n      params: { ids: trackIds }\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get audio analysis for a single track identified by its unique Spotify ID.\n   * See [Get Audio Analysis for a Track](https://developer.spotify.com/web-api/get-audio-analysis/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {string} trackId The id of the track. If you know the Spotify URI it is easy\n   * to find the track id (e.g. spotify:track:<here_is_the_track_id>)\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAudioAnalysisForTrack = function(trackId, callback) {\n    var requestData = {};\n    requestData.url = _baseUri + '/audio-analysis/' + trackId;\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Create a playlist-style listening experience based on seed artists, tracks and genres.\n   * See [Get Recommendations Based on Seeds](https://developer.spotify.com/web-api/get-recommendations/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getRecommendations = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Retrieve a list of available genres seed parameter values for recommendations.\n   * See [Available Genre Seeds](https://developer.spotify.com/web-api/get-recommendations/#available-genre-seeds) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getAvailableGenreSeeds = function(callback) {\n    var requestData = {\n      url: _baseUri + '/recommendations/available-genre-seeds'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about a user’s available devices.\n   * See [Get a User’s Available Devices](https://developer.spotify.com/web-api/get-a-users-available-devices/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyDevices = function(callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/devices'\n    };\n    return _checkParamsAndPerformRequest(requestData, {}, callback);\n  };\n\n  /**\n   * Get information about the user’s current playback state, including track, track progress, and active device.\n   * See [Get Information About The User’s Current Playback](https://developer.spotify.com/web-api/get-information-about-the-users-current-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlaybackState = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Get the object currently being played on the user’s Spotify account.\n   * See [Get the User’s Currently Playing Track](https://developer.spotify.com/web-api/get-the-users-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.getMyCurrentPlayingTrack = function(options, callback) {\n    var requestData = {\n      url: _baseUri + '/me/player/currently-playing'\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Transfer playback to a new device and determine if it should start playing.\n   * See [Transfer a User’s Playback](https://developer.spotify.com/web-api/transfer-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Array<string>} deviceIds A JSON array containing the ID of the device on which playback should be started/transferred.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.transferMyPlayback = function(deviceIds, options, callback) {\n    var postData = options || {};\n    postData.device_ids = deviceIds;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player',\n      postData: postData\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Start a new context or resume current playback on the user’s active device.\n   * See [Start/Resume a User’s Playback](https://developer.spotify.com/web-api/start-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.play = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var postData = {};\n    ['context_uri', 'uris', 'offset', 'position_ms'].forEach(function(field) {\n      if (field in options) {\n        postData[field] = options[field];\n      }\n    });\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/play',\n      params: params,\n      postData: postData\n    };\n\n    // need to clear options so it doesn't add all of them to the query params\n    var newOptions = typeof options === 'function' ? options : {};\n    return _checkParamsAndPerformRequest(requestData, newOptions, callback);\n  };\n\n  /**\n   * Pause playback on the user’s account.\n   * See [Pause a User’s Playback](https://developer.spotify.com/web-api/pause-a-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.pause = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/pause',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to next track in the user’s queue.\n   * See [Skip User’s Playback To Next Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToNext = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/next',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Skips to previous track in the user’s queue.\n   * Note that this will ALWAYS skip to the previous track, regardless of the current track’s progress.\n   * Returning to the start of the current track should be performed using `.seek()`\n   * See [Skip User’s Playback To Previous Track](https://developer.spotify.com/web-api/skip-users-playback-to-next-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.skipToPrevious = function(options, callback) {\n    options = options || {};\n    var params = 'device_id' in options ? {device_id: options.device_id} : null;\n    var requestData = {\n      type: 'POST',\n      url: _baseUri + '/me/player/previous',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Seeks to the given position in the user’s currently playing track.\n   * See [Seek To Position In Currently Playing Track](https://developer.spotify.com/web-api/seek-to-position-in-currently-playing-track/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} position_ms The position in milliseconds to seek to. Must be a positive number.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.seek = function(position_ms, options, callback) {\n    options = options || {};\n    var params = {\n      position_ms: position_ms\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/seek',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the repeat mode for the user’s playback. Options are repeat-track, repeat-context, and off.\n   * See [Set Repeat Mode On User’s Playback](https://developer.spotify.com/web-api/set-repeat-mode-on-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {String} state A string set to 'track', 'context' or 'off'.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setRepeat = function(state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/repeat',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Set the volume for the user’s current playback device.\n   * See [Set Volume For User’s Playback](https://developer.spotify.com/web-api/set-volume-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {number} volume_percent The volume to set. Must be a value from 0 to 100 inclusive.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setVolume = function(volume_percent, options, callback) {\n    options = options || {};\n    var params = {\n      volume_percent: volume_percent\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/volume',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Toggle shuffle on or off for user’s playback.\n   * See [Toggle Shuffle For User’s Playback](https://developer.spotify.com/web-api/toggle-shuffle-for-users-playback/) on\n   * the Spotify Developer site for more information about the endpoint.\n   *\n   * @param {bool} state Whether or not to shuffle user's playback.\n   * @param {Object} options A JSON object with options that can be passed.\n   * @param {function(Object,Object)} callback An optional callback that receives 2 parameters. The first\n   * one is the error object (null if no error), and the second is the value if the request succeeded.\n   * @return {Object} Null if a callback is provided, a `Promise` object otherwise\n   */\n  Constr.prototype.setShuffle = function(state, options, callback) {\n    options = options || {};\n    var params = {\n      state: state\n    };\n    if ('device_id' in options) {\n      params.device_id = options.device_id;\n    }\n    var requestData = {\n      type: 'PUT',\n      url: _baseUri + '/me/player/shuffle',\n      params: params\n    };\n    return _checkParamsAndPerformRequest(requestData, options, callback);\n  };\n\n  /**\n   * Gets the access token in use.\n   *\n   * @return {string} accessToken The access token\n   */\n  Constr.prototype.getAccessToken = function() {\n    return _accessToken;\n  };\n\n  /**\n   * Sets the access token to be used.\n   * See [the Authorization Guide](https://developer.spotify.com/web-api/authorization-guide/) on\n   * the Spotify Developer site for more information about obtaining an access token.\n   *\n   * @param {string} accessToken The access token\n   * @return {void}\n   */\n  Constr.prototype.setAccessToken = function(accessToken) {\n    _accessToken = accessToken;\n  };\n\n  /**\n   * Sets an implementation of Promises/A+ to be used. E.g. Q, when.\n   * See [Conformant Implementations](https://github.com/promises-aplus/promises-spec/blob/master/implementations.md)\n   * for a list of some available options\n   *\n   * @param {Object} PromiseImplementation A Promises/A+ valid implementation\n   * @throws {Error} If the implementation being set doesn't conform with Promises/A+\n   * @return {void}\n   */\n  Constr.prototype.setPromiseImplementation = function(PromiseImplementation) {\n    var valid = false;\n    try {\n      var p = new PromiseImplementation(function(resolve) {\n        resolve();\n      });\n      if (typeof p.then === 'function' && typeof p.catch === 'function') {\n        valid = true;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    if (valid) {\n      _promiseImplementation = PromiseImplementation;\n    } else {\n      throw new Error('Unsupported implementation of Promises/A+');\n    }\n  };\n\n  return Constr;\n})();\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n  module.exports = SpotifyWebApi;\n}"]}